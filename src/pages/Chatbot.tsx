
import React, { useState, useRef, useEffect } from 'react';
import { Send, Bot, User, Sparkles, TrendingUp, Target, Zap, BarChart3, Settings, MessageCircle, ArrowRight, Lightbulb } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useLanguage } from '@/hooks/useLanguage';

interface ChatMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

interface Strategy {
  id: number;
  title: string;
  description: string;
  impact: string;
  icon: React.ReactNode;
  color: string;
  active: boolean;
}

const Chatbot = () => {
  const { language } = useLanguage();
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: '1',
      role: 'assistant',
      content: 'Ol√°! Eu sou a Izy, sua assistente de IA da Otmizy! üöÄ Como posso ajud√°-lo a otimizar suas campanhas hoje?',
      timestamp: new Date(),
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [currentStrategy, setCurrentStrategy] = useState(0);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const strategies: Strategy[] = [
    {
      id: 1,
      title: "Otimiza√ß√£o de Audience",
      description: "Identifiquei que seu p√∫blico de 25-34 anos tem 3x mais convers√µes. Sugiro aumentar o budget para essa faixa et√°ria.",
      impact: "+47% ROAS",
      icon: <Target className="w-6 h-6 text-blue-400" />,
      color: "border-blue-500/30 bg-blue-500/5",
      active: true
    },
    {
      id: 2,
      title: "Ajuste de Hor√°rios",
      description: "Suas campanhas performam melhor entre 19h-22h. Recomendo concentrar 60% do budget nesse per√≠odo.",
      impact: "+32% CTR",
      icon: <TrendingUp className="w-6 h-6 text-green-400" />,
      color: "border-green-500/30 bg-green-500/5",
      active: false
    },
    {
      id: 3,
      title: "Palavras-chave Negativas",
      description: "Detectei 15 termos que est√£o gastando budget sem converter. Adicionar essas palavras negativas pode economizar R$ 1.2k/m√™s.",
      impact: "-28% CPC",
      icon: <Zap className="w-6 h-6 text-yellow-400" />,
      color: "border-yellow-500/30 bg-yellow-500/5",
      active: false
    }
  ];

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentStrategy((prev) => (prev + 1) % strategies.length);
    }, 4000);
    return () => clearInterval(interval);
  }, []);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const quickActions = [
    {
      title: 'Estrat√©gias de Marketing',
      description: 'Desenvolva estrat√©gias personalizadas',
      icon: <Target className="w-6 h-6" />,
      color: 'bg-blue-500',
      prompt: 'Preciso de estrat√©gias de marketing para minha campanha'
    },
    {
      title: 'Otimizar Campanhas',
      description: 'Melhore o desempenho das suas campanhas',
      icon: <TrendingUp className="w-6 h-6" />,
      color: 'bg-green-500',
      prompt: 'Como posso otimizar minhas campanhas atuais?'
    },
    {
      title: 'An√°lise de M√©tricas',
      description: 'Entenda suas m√©tricas e KPIs',
      icon: <BarChart3 className="w-6 h-6" />,
      color: 'bg-purple-500',
      prompt: 'Preciso analisar as m√©tricas das minhas campanhas'
    },
    {
      title: 'Automa√ß√£o',
      description: 'Configure automa√ß√µes inteligentes',
      icon: <Zap className="w-6 h-6" />,
      color: 'bg-yellow-500',
      prompt: 'Como configurar automa√ß√µes para minhas campanhas?'
    },
    {
      title: 'Configura√ß√µes',
      description: 'Ajuste suas configura√ß√µes',
      icon: <Settings className="w-6 h-6" />,
      color: 'bg-gray-500',
      prompt: 'Preciso ajuda com as configura√ß√µes da plataforma'
    },
    {
      title: 'Suporte Geral',
      description: 'Tire suas d√∫vidas gerais',
      icon: <MessageCircle className="w-6 h-6" />,
      color: 'bg-indigo-500',
      prompt: 'Tenho uma d√∫vida geral sobre a plataforma'
    }
  ];

  const generateResponse = (userMessage: string): string => {
    const responses = {
      estrategias: [
        "√ìtima pergunta sobre estrat√©gias! Para campanhas eficazes, recomendo: 1) Definir p√∫blico-alvo espec√≠fico, 2) Criar mensagens personalizadas, 3) Testar diferentes criativos, 4) Usar dados para otimiza√ß√£o cont√≠nua. Quer que eu detalhe algum desses pontos?",
        "Para estrat√©gias de marketing eficazes, sugiro focar em: segmenta√ß√£o precisa, testes A/B constantes, an√°lise de concorrentes e otimiza√ß√£o baseada em dados. Qual aspecto te interessa mais?",
        "As melhores estrat√©gias incluem: 1) An√°lise profunda do p√∫blico, 2) Cria√ß√£o de funis de convers√£o, 3) Automa√ß√£o de campanhas, 4) Monitoramento em tempo real. Posso ajudar a implementar alguma?"
      ],
      otimizar: [
        "Para otimizar suas campanhas, analise: CTR, CPA, ROAS e taxa de convers√£o. Recomendo: ajustar palavras-chave, refinar p√∫blicos, testar novos criativos e otimizar hor√°rios de veicula√ß√£o. Quer focar em alguma m√©trica espec√≠fica?",
        "Excelente! Para otimiza√ß√£o, sugiro: 1) Revisar palavras-chave negativas, 2) Ajustar lances autom√°ticos, 3) Testar novos p√∫blicos similares, 4) Analisar hor√°rios de melhor performance. Por onde come√ßamos?",
        "Para otimizar campanhas efetivamente: identifique gargalos, teste elementos visuais, ajuste segmenta√ß√£o, monitore concorr√™ncia e use automa√ß√µes inteligentes. Qual campanha voc√™ gostaria de focar?"
      ],
      metricas: [
        "Vamos analisar suas m√©tricas! As principais s√£o: ROAS (retorno sobre investimento em an√∫ncios), CPA (custo por aquisi√ß√£o), CTR (taxa de cliques) e LTV (valor do cliente). Qual m√©trica est√° te preocupando mais?",
        "Para an√°lise de m√©tricas eficaz, foque em: 1) ROAS m√≠nimo de 3:1, 2) CPA abaixo do LTV, 3) CTR acima da m√©dia do setor, 4) Taxa de convers√£o crescente. Quer que eu analise alguma m√©trica espec√≠fica?",
        "M√©tricas essenciais para acompanhar: impress√µes, cliques, convers√µes, receita, ROAS, CPC e qualidade do tr√°fego. Posso ajudar a interpretar os dados das suas campanhas!"
      ],
      automacao: [
        "Automa√ß√µes inteligentes podem revolucionar suas campanhas! Sugiro: 1) Lances autom√°ticos baseados em ROAS, 2) Pausar campanhas com baixo desempenho, 3) Ajustar or√ßamentos automaticamente, 4) Enviar relat√≥rios programados. Qual automa√ß√£o te interessa?",
        "Para automa√ß√£o eficaz, configure: regras de otimiza√ß√£o de lance, alertas de performance, redistribui√ß√£o autom√°tica de or√ßamento e relat√≥rios personalizados. Por onde voc√™ gostaria de come√ßar?",
        "As automa√ß√µes mais eficazes incluem: gest√£o de lances, otimiza√ß√£o de p√∫blicos, controle de or√ßamento e alertas inteligentes. Posso ajudar a configurar qualquer uma dessas!"
      ],
      configuracoes: [
        "Nas configura√ß√µes, voc√™ pode: 1) Conectar suas contas de an√∫ncios, 2) Definir metas e alertas, 3) Configurar relat√≥rios autom√°ticos, 4) Ajustar prefer√™ncias de notifica√ß√£o. Precisa de ajuda com algum item espec√≠fico?",
        "Para configurar a plataforma corretamente: conecte todas as suas contas, defina seus KPIs principais, configure alertas personalizados e estabele√ßa frequ√™ncia de relat√≥rios. Qual configura√ß√£o voc√™ gostaria de ajustar?",
        "Vamos configurar tudo perfeitamente! Posso ajudar com: integra√ß√£o de plataformas, defini√ß√£o de metas, configura√ß√£o de dashboards e personaliza√ß√£o de alertas. O que precisa configurar primeiro?"
      ],
      default: [
        "Interessante pergunta! Baseado na minha experi√™ncia com campanhas, posso sugerir algumas estrat√©gias personalizadas. Voc√™ poderia me contar mais detalhes sobre seu objetivo espec√≠fico?",
        "√ìtima quest√£o! Para te ajudar melhor, preciso entender: qual √© seu principal desafio atual? Est√° relacionado a performance, or√ßamento, ou estrat√©gia geral?",
        "Posso ajudar com isso! A Otmizy oferece v√°rias ferramentas para otimiza√ß√£o. Que tipo de resultado voc√™ est√° buscando alcan√ßar com suas campanhas?"
      ]
    };

    const message = userMessage.toLowerCase();
    
    if (message.includes('estrat√©gia') || message.includes('marketing') || message.includes('campanha')) {
      return responses.estrategias[Math.floor(Math.random() * responses.estrategias.length)];
    } else if (message.includes('otimiz') || message.includes('melhor') || message.includes('performance')) {
      return responses.otimizar[Math.floor(Math.random() * responses.otimizar.length)];
    } else if (message.includes('m√©trica') || message.includes('roas') || message.includes('cpa') || message.includes('kpi')) {
      return responses.metricas[Math.floor(Math.random() * responses.metricas.length)];
    } else if (message.includes('automa√ß') || message.includes('autom√°t') || message.includes('regra')) {
      return responses.automacao[Math.floor(Math.random() * responses.automacao.length)];
    } else if (message.includes('configur') || message.includes('ajust') || message.includes('prefer√™n')) {
      return responses.configuracoes[Math.floor(Math.random() * responses.configuracoes.length)];
    } else {
      return responses.default[Math.floor(Math.random() * responses.default.length)];
    }
  };

  const handleSendMessage = async (messageText?: string) => {
    const textToSend = messageText || inputMessage;
    if (!textToSend.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      role: 'user',
      content: textToSend,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    if (!messageText) setInputMessage('');
    setIsLoading(true);

    setTimeout(() => {
      const response = generateResponse(textToSend);
      const assistantMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: response,
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, assistantMessage]);
      setIsLoading(false);
    }, 1000 + Math.random() * 1000);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="min-h-screen bg-background p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center space-x-3 mb-4">
            <div className="w-12 h-12 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-full flex items-center justify-center">
              <Sparkles className="w-6 h-6 text-black" />
            </div>
            <h1 className="text-4xl font-bold bg-gradient-to-r from-yellow-400 to-yellow-600 bg-clip-text text-transparent">
              Otmizy.ai
            </h1>
          </div>
          <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
            Sua assistente de IA para otimiza√ß√£o de campanhas. Transforme seus dados em insights acion√°veis!
          </p>
          <Badge className="mt-4 bg-yellow-500/10 text-yellow-400 border-yellow-500/20 animate-pulse">
            ü§ñ IA Avan√ßada ‚Ä¢ Dispon√≠vel 24/7
          </Badge>
        </div>

        {/* Izy AI Agent Preview Section */}
        <div className="mb-8">
          <Card className="bg-gradient-to-r from-yellow-500/20 to-orange-500/20 border-yellow-500/20 p-6">
            <div className="bg-gray-900/80 rounded-xl p-6 backdrop-blur-sm">
              {/* Izy Header */}
              <div className="flex items-center justify-center mb-8">
                <div className="flex items-center space-x-3">
                  <div className="relative">
                    <div className="w-12 h-12 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full flex items-center justify-center animate-pulse">
                      <Bot className="w-6 h-6 text-black" />
                    </div>
                    <div className="absolute -top-1 -right-1 w-4 h-4 bg-green-400 rounded-full animate-ping"></div>
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-yellow-400">Izy AI Assistant</h3>
                    <p className="text-sm text-muted-foreground">Analisando suas campanhas em tempo real</p>
                  </div>
                </div>
              </div>

              {/* Strategy Cards */}
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
                {strategies.map((strategy, index) => (
                  <Card 
                    key={strategy.id}
                    className={`relative cursor-pointer transition-all duration-500 hover-scale ${
                      index === currentStrategy 
                        ? `${strategy.color} ring-2 ring-yellow-500/50 transform scale-105` 
                        : 'bg-gray-800/50 border-gray-700/50 hover:bg-gray-800/70'
                    }`}
                  >
                    <CardContent className="p-6">
                      <div className="flex items-start space-x-3 mb-4">
                        {strategy.icon}
                        <div>
                          <h4 className="font-semibold text-lg mb-2">{strategy.title}</h4>
                          <p className="text-sm text-muted-foreground leading-relaxed">
                            {strategy.description}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-xl font-bold text-green-400">{strategy.impact}</span>
                        {index === currentStrategy && (
                          <div className="flex items-center text-yellow-400 text-sm">
                            <Lightbulb className="w-4 h-4 mr-1" />
                            Ativa
                          </div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>

              {/* Action Buttons */}
              <div className="flex flex-col sm:flex-row gap-4 justify-center items-center mb-6">
                <Button className="bg-yellow-500 hover:bg-yellow-600 text-black px-6 py-3 rounded-lg">
                  Aplicar Sugest√µes da Izy
                  <ArrowRight className="ml-2 w-4 h-4" />
                </Button>
                <Button variant="outline" className="border-yellow-500/20 hover:bg-yellow-500/10 px-6 py-3 rounded-lg">
                  Ver Mais Insights
                </Button>
              </div>

              {/* Real-time indicator */}
              <div className="text-center">
                <div className="inline-flex items-center space-x-2 text-sm text-muted-foreground">
                  <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                  <span>Monitoramento em tempo real ‚Ä¢ √öltima atualiza√ß√£o: agora</span>
                </div>
              </div>
            </div>
          </Card>
        </div>

        <div className="grid lg:grid-cols-3 gap-8">
          {/* Quick Actions */}
          <div className="lg:col-span-1">
            <Card className="bg-gray-800/50 border-yellow-500/20 h-fit">
              <CardHeader>
                <CardTitle className="text-yellow-400 flex items-center space-x-2">
                  <Zap className="w-5 h-5" />
                  <span>A√ß√µes R√°pidas</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {quickActions.map((action, index) => (
                    <Button
                      key={index}
                      variant="outline"
                      className="w-full justify-start h-auto p-4 border-yellow-500/20 hover:bg-yellow-500/10 hover:border-yellow-500/40 transition-all"
                      onClick={() => handleSendMessage(action.prompt)}
                    >
                      <div className="flex items-start space-x-3">
                        <div className={`${action.color} p-2 rounded-lg flex-shrink-0`}>
                          {action.icon}
                        </div>
                        <div className="text-left">
                          <div className="font-semibold text-white">{action.title}</div>
                          <div className="text-sm text-muted-foreground">{action.description}</div>
                        </div>
                      </div>
                    </Button>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Chat Interface */}
          <div className="lg:col-span-2">
            <Card className="bg-gray-800/50 border-yellow-500/20 h-[700px] flex flex-col">
              <CardHeader className="border-b border-yellow-500/20">
                <CardTitle className="flex items-center space-x-2 text-yellow-400">
                  <Bot className="w-6 h-6" />
                  <span>Chat com Izy</span>
                  <div className="ml-auto flex items-center space-x-2">
                    <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                    <span className="text-sm text-green-400">Online</span>
                  </div>
                </CardTitle>
              </CardHeader>

              <CardContent className="flex-1 overflow-hidden p-0">
                {/* Messages Area */}
                <div className="h-full overflow-y-auto p-4 space-y-4">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'} animate-fade-in`}
                    >
                      <div className={`flex space-x-3 max-w-3xl ${message.role === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>
                        <div className={`w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 ${
                          message.role === 'user' 
                            ? 'bg-yellow-500 text-black' 
                            : 'bg-gradient-to-r from-yellow-400 to-yellow-600 text-black'
                        }`}>
                          {message.role === 'user' ? <User className="w-5 h-5" /> : <Bot className="w-5 h-5" />}
                        </div>
                        <div className={`rounded-lg px-4 py-3 ${
                          message.role === 'user' 
                            ? 'bg-yellow-500 text-black' 
                            : 'bg-gray-700 text-white'
                        }`}>
                          <p className="text-sm leading-relaxed">{message.content}</p>
                          <span className="text-xs opacity-60 mt-2 block">
                            {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                          </span>
                        </div>
                      </div>
                    </div>
                  ))}

                  {/* Typing indicator */}
                  {isLoading && (
                    <div className="flex justify-start animate-fade-in">
                      <div className="flex space-x-3 max-w-3xl">
                        <div className="w-10 h-10 rounded-full bg-gradient-to-r from-yellow-400 to-yellow-600 text-black flex items-center justify-center flex-shrink-0">
                          <Bot className="w-5 h-5" />
                        </div>
                        <div className="bg-gray-700 text-white rounded-lg px-4 py-3">
                          <div className="flex items-center space-x-2">
                            <div className="flex space-x-1">
                              <div className="w-2 h-2 bg-yellow-400 rounded-full animate-bounce"></div>
                              <div className="w-2 h-2 bg-yellow-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                              <div className="w-2 h-2 bg-yellow-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                            </div>
                            <span className="text-sm">Izy est√° pensando...</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                  <div ref={messagesEndRef} />
                </div>

                {/* Input Area */}
                <div className="border-t border-yellow-500/20 p-4">
                  <div className="flex space-x-2">
                    <Input
                      value={inputMessage}
                      onChange={(e) => setInputMessage(e.target.value)}
                      placeholder="Digite sua pergunta sobre campanhas, m√©tricas ou otimiza√ß√µes..."
                      className="flex-1 bg-gray-700 border-yellow-500/20 text-white placeholder:text-gray-400"
                      onKeyPress={handleKeyPress}
                      disabled={isLoading}
                    />
                    <Button
                      onClick={() => handleSendMessage()}
                      disabled={!inputMessage.trim() || isLoading}
                      className="bg-yellow-500 hover:bg-yellow-600 text-black"
                    >
                      <Send className="w-4 h-4" />
                    </Button>
                  </div>
                  <p className="text-xs text-gray-400 mt-2">
                    üí° Clique nas a√ß√µes r√°pidas ao lado ou digite sua pergunta aqui
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Chatbot;
